#include "mainGame.h"

/*
c	: 절차지향형 프로그래밍
c++ : 객체지향형 프로그래밍

객체지향이란?
모든 데이터를 객체로 취급하여 그 자체만으로도 독립적인 기능을 하고 
다른 객체의 부품으로도 사용할 수 있도록 프로그래밍 하는 방식을 이야기한다.

클래스를 이용하여 객체지향프로그래밍이 가능하다.

클래스
- 객체지향 프로그래밍에서 객체를 생성하기 위한 기본 틀이다.
- 데이터와 함수를 모아서 하나의 자료형으로 만드는 것을 이야기 한다.
- 객체의 멤버번수, 기능 -> 멤버함수를 담은 틀이다.
- 클래스는 무언가를 만들기 위한 것일뿐, 자신 자체에는 아무런 의미가 없다.

객체
- 클래스로부터 만들어진 일종의 하나의 변수라고 생각하면 된다.
- 데이터와 그 데이터의 관련된 동작(절차, 방법, 기능)을 모두 포함한 개념이다.
- 클래스라는 자료형으로 선언한 변수이다.
- 일상적인 행위나 작업을 표준화 시켜서 하나의 제품으로 만들어 놓은 녀석이다.

구조체와 클래스의 차이
C	-> 구조체는 그냥 public.(접근지정자가 딱히 없다.)
C++ -> 클래스는 기본적으로 접근지정자가 - private이다.

객체지향프로그래밍언어(OOP)
- 데이터와 이를 처리하는 루틴들을 하나의 독립된 객체로 바라보는 것을 이야기 한다.

절차지향(C) 
- 각 명령어의 실행순서를 기반으로 본다.

OOP를 사용하는 이유
- 재사용성의 증가.
- 기존에 만들었던 내용들을 상속이나 다형성 등을 이용해서 재사용이 가능하기 때문이다.

숙제 : 객체지향 4대 특징에 대하여 상세히 기술해서 올려놓으세요.
OOP의 특징 (4대 특징) -> 면접 질문
1. 추상화
2. 캡슐화 ( public, private, protected )
3. 상속
4. 다형성(오버 로딩, 오버 라이딩)

*/
/*
class MyClass
{
public:				// 멤버함수
	// 외부에 공개를 하겠다.
	MyClass();
	~MyClass();
//void Update();	// 멤버 함수

private:			// 멤버 변수
	// 숨기는 애들
	int a;			// 멤버 변수
	char* name;

};
*/

int main()
{
	int a;
	int b;

	mainGame mg;

	cin >> a;
	cin >> b;

	mg.setPosition(a, b);
	mg.movePosition();
	mg.showPosition();

	system("pause");
	return 0;
}