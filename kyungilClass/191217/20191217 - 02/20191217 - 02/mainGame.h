#pragma once
#include <iostream>

using namespace std;

/*
	클래스는 객체의 특성을 의미한다.
	c++에서는 보통 헤더 파일에 선언하고, 
	상세한 내용(정의)은 소스파일(cpp)에서 작성한다.
	클래스의 정의는 클래스 이름을 선언하는 것으로 시작한다.

	{}안에는 속성 데이터를 저장할 데이터 멤버(멤버변수)와 
	클래스의 행동(기능)을 조정 할 수 있는 메소드(함수)를 선언한다.
	각 데이터 멤버(멤버변수)와 메소드(함수)는 public, protected, private
	3가지 접근 권한에 매칭이 된다.
	접근 권한 정의 레이블은 순서와 등장 횟수에 제한이 없다.
	public에 있는 멤버는 클래스 밖에서 접근할 수 있다.
	private 멤버는 클래스 내부에서만 접근할 수 있다.
*/
class mainGame
{
private:
	int m_x;		// 클래스 내의 멤버 변수.
	int m_y;

public:
	mainGame();		// 생성자(여기에 코딩해도 되긴 하다. 하지만 웬만 하면 안함)
	~mainGame();	// 소멸자
	/*
		생성자 : 클래스가 메모리에 할당될때(객체가 할당될때) 자동으로 호출한다
		- 사용자가 정의하지 않으면 컴파일시 자동으로 내용없는 빈 생성자를 제공하는데, 이것을 디폴트 생성자라고 한다.
		- 반환값이 없고 클래스 이름과 동일하다.
		- 외부에서 참조해야하기 때문에 접근제어를 public에 두어야 한다.
		- 보통 멤버변수의 값을 초기화 할때 사용한다.
		- 생성자 또한 멤버함수중 하나로 오버로딩이 가능하다.
		- 여러개의 생성자를 정의할 수 있다.

		소멸자 : 생성자와 객체가 소멸될때 자동적으로 호출된다. 클래스와 같은 이름을 가지지만 ~표시가 들어간다.
		- 보통 클래스 내에서 사용한 동적할당 해제 등 소멸시 필요한 행동을 한다.

		앞으로의 숙제는 클래스를 이용해서 한다.
	*/

	/*
	void Init();	// 초기화 이니셜라이즈
	void Release();	// 해제
	void Update();	// 게임이 실질적으로 돌아가는 곳.(연산하는 곳)
	void Render();	// 렌더링
	*/

	void setPosition(int x, int y);
	void movePosition();
	void showPosition();
	
	/*
		public : 
		- 외부에서도 자유롭게 참조할 수 있는 접근제어지정자.
		- 외부에서 직접적으로 멤버를 조작할 수 있기 때문에 공개할 기능은 이곳에 쓴다.
		- 구조체의 디폴트다.

		protected :
		- 클래스 내부와 상속관계에 있는 클래스에서만 접근이 가능한 지정자다.

		private :
		- 클래서의 내부에서만 참조 가능한 지정자(정보은닉)
		- 숨겨야 할 멤버변수 등을 이곳에 둔다.
		- 클래스의 디폴트다.

		접근제어				클래스 내부				상속클래스				클래스 외부
		public					O						O						O
		protected				O						O						X
		private					O						X						X
	*/
};

